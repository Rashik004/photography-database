#!/usr/bin/perl -wT

# Interactive user interface for interacting with the photography database

use strict;
use warnings;
use Switch;
use DBI;
use DBD::mysql;
use SQL::Abstract;
use Data::Dumper;

# Will be called like:
# - photodb film add
# - photodb camera view

# Read in command
my $command = $ARGV[0] or &nocommand;

switch ($command) {
	case 'film' {
		print "you chose film\n";
		my $subcommand = $ARGV[1] or &nosubcommand;
		switch ($subcommand) {
			case 'add' {
				# Add a newly-purchased film
				my %data;
				$data{'filmstock_id'} = &listchoices('filmstock', "select filmstock_id as id, name as opt from FILMSTOCK");
				$data{'format_id'} = &listchoices('format', "select format_id as id, format as opt from FORMAT");
				$data{'frames'} = prompt('', 'How many frames?');
				if (prompt('no', 'Is this film bulk-loaded?') eq 'yes') {
					$data{'film_bulk_id'} = &listchoices('bulk film', "select film_bulk_id as id, name as opt from FILM_BULK, FILMSTOCK where FILM_BULK.filmstock_id=FILMSTOCK.filmstock_id");
					$data{'film_bulk_loaded'} = prompt('', 'When was the film bulk-loaded?');
				} else {
					$data{'film_batch'} = prompt('', 'Film batch number');
					$data{'film_expiry'} = prompt('', 'Film expiry date');
				}
				$data{'purchase_date'} = prompt('', 'Purchase date');
				$data{'price'} = prompt('', 'Purchase price');

				&newrecord(\%data, 'FILM');
			}
			case 'load' {
				# Load a film into a camera
				my %data;
				my $film_id = &listchoices('film', "select film_id as id, concat(MANUFACTURER.manufacturer, ' ', FILMSTOCK.name, ' (', FORMAT.format, ' format, ', if(colour, 'colour', 'B&W'), ')' ) as opt from FILM, FILMSTOCK, FORMAT, MANUFACTURER where camera_id is null and date is null and FILM.filmstock_id=FILMSTOCK.filmstock_id and FILM.format_id=FORMAT.format_id and FILMSTOCK.manufacturer_id=MANUFACTURER.manufacturer_id");
				$data{'exposed_at'} = prompt('', 'What ISO?');
				$data{'date_loaded'} = prompt('', 'What date was this film loaded?');
				$data{'camera_id'} = &listchoices('camera', "select CAMERA.camera_id as id, concat(MANUFACTURER.manufacturer, ' ', CAMERA.model) as opt from CAMERA, FILM, MANUFACTURER where FILM.format_id=CAMERA.format_id and CAMERA.manufacturer_id=MANUFACTURER.manufacturer_id and film_id=$film_id and own=1");
				$data{'notes'} = prompt('', 'Notes');

				&updaterecord(\%data, 'FILM', "film_id=$film_id");
			}
			case 'develop' {
				# Develop a film
				&notimplemented;
			}
			case 'help' {
				&notimplemented;
			}
			else {
				&notimplemented;
			}
		}
	}
	case 'camera' {
		print "you chose camera\n";
		my $subcommand = $ARGV[1] or &nosubcommand;
		switch ($subcommand) {
			case 'add' {
				&notimplemented;
			}
			case 'show-lenses' {
				&notimplemented;
			}
			case 'help' {
				&notimplemented;
			}
			else {
				&notimplemented;
			}
		}
	}
	case 'negative' {
		print "you chose negative\n";
		my $subcommand = $ARGV[1] or &nosubcommand;
		switch ($subcommand) {
			case 'add' {
				# Add a single neg to a film
				&notimplemented;
			}
			case 'bulk-add' {
				# Add lots of negatives to a film, maybe asks if they were all shot with the same lens
				&notimplemented;
			}
			case 'help' {
				&notimplemented;
			}
			else {
				&notimplemented;
			}
		}
	}
	case 'lens' {
		print "you chose lens\n";
		my $subcommand = $ARGV[1] or &nosubcommand;
		switch ($subcommand) {
			case 'add' {
				&notimplemented;
			}
			case 'help' {
				&notimplemented;
			}
			else {
				&notimplemented;
			}
		}
	}
	case 'print' {
		print "you chose lens\n";
		my $subcommand = $ARGV[1] or &nosubcommand;
		switch ($subcommand) {
			case 'add' {
				&notimplemented;
			}
			case 'tone' {
				&notimplemented;
			}
			case 'help' {
				&notimplemented;
			}
			else {
				&notimplemented;
			}
		}
	}
	case 'help' {
		&help;
	}
	else {
		&nocommand;
	}
}

# Print a warning that this command/subcommand is not yet implemented
sub notimplemented {
	die "This command or subcommand is not yet implemented.\n";
}

# Quit if no command is given
sub nocommand {
	die "Please enter a valid command. Use '$0 help' for list of commands.\n";
}

# Quit if no subcommand is given
sub nosubcommand {
	die "Please enter a valid subcommand. Use '$0 $command help' for list of subcommands.\n";
}

# Print help message
sub help {
	my $command = shift;
        my $subcommand = shift;

	print "Photography Database UI\n";
	print "\n";
	print "$0 <command> <subcommand>\n";
	print "e.g. $0 film add\n";
	print "\n";
	print "Valid commands: film, camera, negative, lens, print, help\n";
	exit;
}

# List arbitrary choices and return ID of the selected one
sub listchoices {
	my $keyword = shift;
	my $query = shift;

	print "Please select a $keyword from the list:\n";

	my $db = &db;
	my $sth = $db->prepare($query) or die "Couldn't prepare statement: " . $db->errstr;
	my $rows = $sth->execute();

	$sth->execute();
	my $ref;

	while ($ref = $sth->fetchrow_hashref) {
		print "\t$ref->{id}\t$ref->{opt}\n";
	}

	# Wait for input
	my $input = prompt('', "Please select a $keyword");

	# Validate input
	$input =~ s/[^0-9]//g;

	# Return input
	return $input;
}

# Insert a record into any table
sub newrecord {
	# Read in hash of values
	my $data = shift;

	# Read in table name
	my $table = shift;

	# Dump data for debugging
	print "\n\nThis is what I would have inserted into $table:\n";
	print Dumper(\$data);

	# Build query
	# Execute query
	# Display inserted row
}

# Update an existing record in any table
sub updaterecord {
	# Read in hash new values
	my $data = shift;

	# Read in table name
	my $table = shift;

	# Read in condition
	my $condition = shift;

	# Dump data for debugging
        print "\n\nThis is what I would have updated into $table where $condition:\n";
        print Dumper(\$data);

	#	my $string;
	#foreach (keys $data) {
	#	$string .= "$_=$data{$_}";
	#}

	#my $query = "update $table set $flattened where $condition";
}

# Connect to the database
sub db {
	#TODO: Move DB settings out to config file
	my $dsn = "DBI:mysql:database=photography;host=192.168.0.2";
	my $dbh = DBI->connect($dsn, 'photography','photography') or die "Couldn't connect to database: " . DBI->errstr;
	return $dbh;
}

# Prompt for an arbitrary value
sub prompt {
        my $default = shift || "";
        my $prompt = shift;

        print "$prompt [$default]: ";
        my $input = <STDIN>;
        chomp($input);

        my $rv = ($input eq "") ? $default:$input;
        return $rv;
}
