#!/usr/bin/perl -wT

# Interactive user interface for interacting with the photography database

use strict;
use warnings;
use Switch;
use DBI;
use DBD::mysql;
use SQL::Abstract;
use Config::IniHash;
use Data::Dumper;

# Will be called like:
# - photodb film add
# - photodb camera view

# Read in command
my $command = $ARGV[0] or &nocommand;

switch ($command) {
	case 'film' {
		print "you chose film\n";
		my $subcommand = $ARGV[1] or &nosubcommand;
		switch ($subcommand) {
			case 'add' {
				# Add a newly-purchased film
				my %data;
				$data{'filmstock_id'} = &listchoices('filmstock', "select filmstock_id as id, name as opt from FILMSTOCK");
				$data{'format_id'} = &listchoices('format', "select format_id as id, format as opt from FORMAT");
				$data{'frames'} = prompt('', 'How many frames?');
				if (prompt('no', 'Is this film bulk-loaded?') eq 'yes') {
					$data{'film_bulk_id'} = &listchoices('bulk film', "select film_bulk_id as id, name as opt from FILM_BULK, FILMSTOCK where FILM_BULK.filmstock_id=FILMSTOCK.filmstock_id");
					$data{'film_bulk_loaded'} = prompt('', 'When was the film bulk-loaded?');
				} else {
					$data{'film_batch'} = prompt('', 'Film batch number');
					$data{'film_expiry'} = prompt('', 'Film expiry date');
				}
				$data{'purchase_date'} = prompt('', 'Purchase date');
				$data{'price'} = prompt('', 'Purchase price');

				&newrecord(\%data, 'FILM');
			}
			case 'load' {
				# Load a film into a camera
				my %data;
				my $film_id = &listchoices('film', "select film_id as id, concat(MANUFACTURER.manufacturer, ' ', FILMSTOCK.name, ' (', FORMAT.format, ' format, ', if(colour, 'colour', 'B&W'), ')' ) as opt from FILM, FILMSTOCK, FORMAT, MANUFACTURER where camera_id is null and date is null and FILM.filmstock_id=FILMSTOCK.filmstock_id and FILM.format_id=FORMAT.format_id and FILMSTOCK.manufacturer_id=MANUFACTURER.manufacturer_id");
				$data{'exposed_at'} = prompt('', 'What ISO?');
				$data{'date_loaded'} = prompt('', 'What date was this film loaded?');
				$data{'camera_id'} = &listchoices('camera', "select CAMERA.camera_id as id, concat(MANUFACTURER.manufacturer, ' ', CAMERA.model) as opt from CAMERA, FILM, MANUFACTURER where FILM.format_id=CAMERA.format_id and CAMERA.manufacturer_id=MANUFACTURER.manufacturer_id and film_id=$film_id and own=1");
				$data{'notes'} = prompt('', 'Notes');

				&updaterecord(\%data, 'FILM', "film_id=$film_id");
			}
			case 'develop' {
				# Develop a film
				my %data;
				my $film_id = &listchoices('film', "select film_id as id, concat(MANUFACTURER.manufacturer, ' ', FILMSTOCK.name, ' (', FORMAT.format, ' format, ', if(colour, 'colour', 'B&W'), ')' ) as opt from FILM, FILMSTOCK, FORMAT, MANUFACTURER where camera_id is not null and date is null and FILM.filmstock_id=FILMSTOCK.filmstock_id and FILM.format_id=FORMAT.format_id and FILMSTOCK.manufacturer_id=MANUFACTURER.manufacturer_id");
				$data{'date'} = prompt('', 'What date was this film processed?');
				$data{'developer_id'} = &listchoices('developer', "select developer_id as id, name as opt from DEVELOPER where for_film=1");
				$data{'directory'} = prompt('', 'What directory are these scans in?');
				$data{'photographer_id'} = &listchoices('photographer', "select photographer_id as id, name as opt from PHOTOGRAPHER");
				$data{'dev_uses'} = prompt('', 'How many previous uses has the developer had?');
				$data{'dev_time'} = prompt('', 'How long was the film developed for?');
				$data{'dev_temp'} = prompt('', 'What temperature was the developer?');
				$data{'dev_n'} = prompt('', 'What push/pull was used?');
				$data{'development_notes'} = prompt('', 'Any other development notes');
				$data{'processed_by'} = prompt('', 'Who developed the film?');
				&updaterecord(\%data, 'FILM', "film_id=$film_id");
			}
			case 'help' {
				&notimplemented;
			}
			else {
				&notimplemented;
			}
		}
	}
	case 'camera' {
		print "you chose camera\n";
		my $subcommand = $ARGV[1] or &nosubcommand;
		switch ($subcommand) {
			case 'add' {
				my %data;
				$data{'manufacturer_id'} = &listchoices('manufacturer', "select manufacturer_id as id, manufacturer as opt from MANUFACTURER");
				$data{'model'} = prompt('', 'What model is the camera?');
				$data{'mount_id'} = &listchoices('mount', "select mount_id as id, mount as opt from MOUNT where purpose='Camera'");
				$data{'format_id'} = &listchoices('format', "select format_id as id, format as opt from FORMAT");
				$data{'focus_type_id'} = &listchoices('focus type', "select focus_type_id as id, focus_type as opt from FOCUS_TYPE");
				$data{'metering'} = prompt('', 'Does this camera have metering?');
				if ($data{'metering'} == 1) {
					$data{'coupled_metering'} = prompt('', 'Is the metering coupled?');
					$data{'metering_pattern_id'} = &listchoices('metering pattern', "select metering_pattern_id as id, metering_pattern as opt from METERING_PATTERN");
					$data{'metering_type_id'} = &listchoices('metering type', "select metering_type_id as id, metering as opt from METERING_TYPE");
					$data{'meter_min_ev'} = prompt('', 'What\'s the lowest EV the meter can handle?');
					$data{'meter_max_ev'} = prompt('', 'What\'s the highest EV the meter can handle?');
				}
				$data{'body_type_id'} = &listchoices('body type', "select body_type_id as id, body_type as opt from BODY_TYPE");
				$data{'weight'} = prompt('', 'What does it weigh?');
				$data{'acquired'} = prompt('', 'When was it acquired?');
				$data{'cost'} = prompt('', 'What did the camera cost?');
				$data{'introduced'} = prompt('', 'What year was the camera introduced?');
				$data{'discontinued'} = prompt('', 'What year was the camera discontinued?');
				$data{'serial'} = prompt('', 'What is the camera\'s serial number?');
				$data{'datecode'} = prompt('', 'What is the camera\'s datecode?');
				$data{'manufactured'} = prompt('', 'When was the camera manufactured?');
				$data{'own'} = prompt(1, 'Do you own this camera?');
				$data{'negative_size_id'} = &listchoices('negative size', "select negative_size_id as id, negative_size as opt from NEGATIVE_SIZE");
				$data{'shutter_type_id'} = &listchoices('shutter type', "select shutter_type_id as id, shutter_type as opt from SHUTTER_TYPE");
				$data{'shutter_model'} = prompt('', 'What is the shutter model?');
				$data{'cable_release'} = prompt('', 'Does this camera have a cable release?');
				$data{'viewfinder_coverage'} = prompt('', 'What is the viewfinder coverage?');
				$data{'power_drive'} = prompt('', 'Does this camera have power drive?');
				if ($data{'power_drive'} == 1) {
					$data{'continuous_fps'} = prompt('How many frames per second can this camera manage?');
				}
				$data{'video'} = prompt('', 'Does this camera have a video/movie function?');
				$data{'digital'} = prompt('', 'Is this a digital camera?');
				$data{'fixed_mount'} = prompt('', 'Does this camera have a fixed lens?');
				if ($data{'fixed_mount'} == 1) {
					#$data{'lens_id'} = &listchoices
				}
				$data{'battery_qty'} = prompt('', 'How many batteries does this camera take?');
				if ($data{'battery_qty'} > 0) {
					$data{'battery_type'} = &listchoices('battery type', "select battery_type as id, concat(battery_name, ifnull(concat(' (', voltage, 'V)'), '')) as opt from BATTERY");
				}
				$data{'notes'} = prompt('', 'Additional notes');
				$data{'source'} = prompt('', 'Where was the camera acquired from?');
				$data{'M'} = prompt('', 'Does it have manual exposure?');
				$data{'Av'} = prompt('', 'Does it have aperture priority exposure?');
				$data{'Tv'} = prompt('', 'Does it have shutter priority exposure?');
				$data{'P'} = prompt('', 'Does it have program/auto exposure?');
				$data{'min_shutter'} = prompt('', 'What\'s the fastest shutter speed?');
				$data{'max_shutter'} = prompt('', 'What\'s the slowest shutter speed?');
				$data{'bulb'} = prompt('', 'Does the camera have bulb exposure mode?');
				$data{'time'} = prompt('', 'Does the camera have time exposure mode?');
				$data{'min_iso'} = prompt('', 'What\'s the lowest ISO the camera can do?');
				$data{'max_iso'} = prompt('', 'What\'s the highest ISO the camera can do?');
				$data{'af_points'} = prompt('', 'How many autofocus points does the camera have?');
				$data{'int_flash'} = prompt('', 'Does the camera have an internal flash?');
				if ($data{'int_flash'} == 1) {
					$data{'int_flash_gn'} = prompt('', 'What\'s the guide number of the internal flash?');
				}
				$data{'ext_flash'} = prompt('', 'Does the camera support an external flash?');
				if ($data{'ext_flash'} == 1) {
					$data{'pc_sync'} = prompt('', 'Does the camera have a PC sync socket?');
					$data{'hotshoe'} = prompt('', 'Does the camera have a hot shoe?');
				}
				if ($data{'int_flash'} == 1 || $data{'ext_flash'} == 1) {
					$data{'coldshoe'} = prompt('', 'Does the camera have a cold/accessory shoe?');
					$data{'x_sync'} = prompt('', 'What\'s the X-sync speed?');
					$data{'flash_metering'} = &listchoices('flash protocol', "select * from FLASH_PROTOCOL");
				}
				$data{'condition_id'} = &listchoices('condition', "select condition_id as id, name as opt from `CONDITION`");
				$data{'oem_case'} = prompt('', 'Do you have the original case for this camera?');
				$data{'dof_preview'} = prompt('', 'Does this camera have a depth-of-field preview feature?');
				&newrecord(\%data, 'CAMERA');
			}
			case 'show-lenses' {
				&notimplemented;
			}
			case 'help' {
				&notimplemented;
			}
			else {
				&notimplemented;
			}
		}
	}
	case 'negative' {
		print "you chose negative\n";
		my $subcommand = $ARGV[1] or &nosubcommand;
		switch ($subcommand) {
			case 'add' {
				# Add a single neg to a film
				&notimplemented;
			}
			case 'bulk-add' {
				# Add lots of negatives to a film, maybe asks if they were all shot with the same lens
				&notimplemented;
			}
			case 'help' {
				&notimplemented;
			}
			else {
				&notimplemented;
			}
		}
	}
	case 'lens' {
		print "you chose lens\n";
		my $subcommand = $ARGV[1] or &nosubcommand;
		switch ($subcommand) {
			case 'add' {
				my %data;
				$data{'fixed_mount'} = prompt(0, 'Does this lens have a fixed mount?');
				if ($data{'fixed_mount'} == 0) {
					$data{'mount_id'} = &listchoices('mount', "select mount_id as id, mount as opt from MOUNT");
				}
				$data{'zoom'} = prompt(0, 'Is this a zoom lens?');
				if ($data{'zoom'} == 0) {
					$data{'min_focal_length'} = prompt('', 'What is the focal length?');
					$data{'max_focal_length'} = $data{'min_focal_length'};
				} else {
					$data{'min_focal_length'} = prompt('', 'What is the minimum focal length?');
				        $data{'max_focal_length'} = prompt('', 'What is the maximum focal length?');
				}
				$data{'manufacturer_id'} = &listchoices('manufacturer', "select manufacturer_id as id, manufacturer as opt from MANUFACTURER");
				$data{'model'} = prompt('', 'What is the lens model?');
				$data{'closest_focus'} = prompt('', 'How close can the lens focus? (cm)');
				$data{'max_aperture'} = prompt('', 'What is the largest lens aperture?');
				$data{'min_aperture'} = prompt('', 'What is the smallest lens aperture?');
				$data{'elements'} = prompt('', 'How many elements does the lens have?');
				$data{'groups'} = prompt('', 'How many groups are these elements in?');
				$data{'weight'} = prompt('', 'What is the weight of the lens? (g)');
				$data{'nominal_min_angle_diag'} = prompt('', 'What is the minimum diagonal angle of view?');
				$data{'nominal_max_angle_diag'} = prompt('', 'What is the maximum diagonal angle of view?');
				$data{'aperture_blades'} = prompt('', 'How many aperture blades does the lens have?');
				$data{'autofocus'} = prompt('', 'Does this lens have autofocus?');
				$data{'filter_thread'} = prompt('', 'What is the diameter of the filter thread? (mm)');
				$data{'magnification'} = prompt('', 'What is the maximum magnification possible with this lens?');
				$data{'url'} = prompt('', 'Informational URL for this lens');
				$data{'serial'} = prompt('', 'What is the serial number of the lens?');
				$data{'date_code'} = prompt('', 'What is the date code of the lens?');
				$data{'introduced'} = prompt('', 'When was this lens introduced?');
				$data{'discontinued'} = prompt('', 'When was this lens discontinued?');
				$data{'manufactured'} = prompt('', 'When was this lens manufactured?');
				$data{'negative_size_id'} = &listchoices('negative size', "select negative_size_id as id, negative_size as opt from NEGATIVE_SIZE");
				$data{'acquired'} = prompt('', 'When was this lens acquired?');
				$data{'cost'} = prompt('', 'How much did this lens cost?');
				$data{'notes'} = prompt('', 'Notes');
				$data{'own'} = prompt(1, 'Do you own this lens?');
				$data{'source'} = prompt('', 'Where was this lens sourced from?');
				$data{'coating'} = prompt('', 'Does this lens have any coating?');
				$data{'hood'} = prompt('', 'What is the model number of the suitable hood for this lens?');
				$data{'hood_id'} = &listchoices('lens hood', "select hood_id as id, model as opt from HOOD");
				$data{'exif_lenstype'} = prompt('', 'EXIF lens type code');
				$data{'rectilinear'} = prompt(1, 'Is this a rectilinear lens?');
				$data{'length'} = prompt('', 'How long is this lens? (mm)');
				$data{'diameter'} = prompt('', 'How wide is this lens? (mm)');
				$data{'condition_id'} = &listchoices('condition', "select condition_id as id, name as opt from `CONDITION`");
				$data{'image_circle'} = prompt('', 'What is the diameter of the image circle?');
				$data{'formula'} = prompt('', 'Does this lens have a named optical formula?');
				$data{'shutter_model'} = prompt('', 'What shutter does this lens incorporate?');
				&newrecord(\%data, 'CAMERA');
			}
			case 'help' {
				&notimplemented;
			}
			else {
				&notimplemented;
			}
		}
	}
	case 'print' {
		print "you chose print\n";
		my $subcommand = $ARGV[1] or &nosubcommand;
		switch ($subcommand) {
			case 'add' {
				my %data;
				$data{'negative_id'} = prompt('', 'Negative ID to print from');
				$data{'date'} = prompt('', 'Date that the print was made');
				$data{'paper_stock_id'} = &listchoices('paper stock', "select paper_stock_id as id, concat(manufacturer, ' ', name, ifnull(concat(' (', finish, ')'), '')) as opt from PAPER_STOCK, MANUFACTURER where PAPER_STOCK.manufacturer_id=MANUFACTURER.manufacturer_id");
				$data{'height'} = prompt('', 'Height of the print (inches)');
				$data{'width'} = prompt('', 'Width of the print (inches)');
				$data{'aperture'} = prompt('', 'Aperture used on enlarging lens');
				$data{'exposure_time'} = prompt('', 'Exposure time (s)');
				$data{'filtration_grade'} = prompt('', 'Filtration grade');
				$data{'development_time'} = prompt('', 'Development time (s)');
				$data{'enlarger_id'} = &listchoices('enlarger', "select enlarger_id as id, concat(manufacturer, ' ', enlarger) as opt from ENLARGER, MANUFACTURER where ENLARGER.manufacturer_id=MANUFACTURER.manufacturer_id and lost is null");
				$data{'lens_id'} = &listchoices('enlarger lens', "select lens_id as id, concat(manufacturer, ' ', model) as opt from LENS, MOUNT, MANUFACTURER where LENS.mount_id=MOUNT.mount_id and LENS.manufacturer_id=MANUFACTURER.manufacturer_id and purpose='Enlarger' and own=1");
				$data{'developer_id'} = &listchoices('developer', "select developer_id as id, name as opt from DEVELOPER where for_paper=1");
				$data{'fine'} = prompt('', 'Is this a fine print?');
				$data{'notes'} = prompt('', 'Notes');
				&newrecord(\%data, 'PRINT');
			}
			case 'tone' {
				my %data;
				my %where;
				$where{'print_id'} = prompt('', 'Which print did you tone?');
				$data{'bleach_time'} = prompt('', 'How long did you bleach for? (HH:MM:SS)');
				$data{'toner_id'} = &listchoices('toner', "select toner_id as id, toner as opt from TONER");
				$data{'toner_dilution'} = prompt('', 'What was the dilution of the first toner?');
				$data{'toner_time'} = prompt('', 'How long did you tone for? (HH:MM:SS)');
				if (prompt('no', 'Did you use a second toner?') eq 'yes') {
					$data{'2nd_toner_id'} = &listchoices('toner', "select toner_id as id, toner as opt from TONER");
					$data{'2nd_toner_dilution'} = prompt('', 'What was the dilution of the second toner?');
					$data{'2nd_toner_time'} = prompt('', 'How long did you tone for? (HH:MM:SS)');
				}
                                &updaterecord(\%data, 'PRINT', \%where);
			}
			case 'sell' {
				my %data;
				my $print_id = prompt('', 'Which print did you sell?');
				$data{'own'} = 0;
				$data{'location'} = prompt('', 'What happened to the print?');
				$data{'sold_price'} = prompt('', 'What price was the print sold for?');
                                &updaterecord(\%data, 'PRINT', "print_id=$print_id");
			}
			case 'help' {
				&notimplemented;
			}
			else {
				&notimplemented;
			}
		}
	}
	case 'help' {
		&help;
	}
	else {
		&nocommand;
	}
}

# Print a warning that this command/subcommand is not yet implemented
sub notimplemented {
	die "This command or subcommand is not yet implemented.\n";
}

# Quit if no command is given
sub nocommand {
	die "Please enter a valid command. Use '$0 help' for list of commands.\n";
}

# Quit if no subcommand is given
sub nosubcommand {
	die "Please enter a valid subcommand. Use '$0 $command help' for list of subcommands.\n";
}

# Print help message
sub help {
	my $command = shift;
        my $subcommand = shift;

	print "Photography Database UI\n";
	print "\n";
	print "$0 <command> <subcommand>\n";
	print "e.g. $0 film add\n";
	print "\n";
	print "Valid commands: film, camera, negative, lens, print, help\n";
	exit;
}

# List arbitrary choices and return ID of the selected one
sub listchoices {
	my $keyword = shift;
	my $query = shift;

	print "Please select a $keyword from the list:\n";

	my $db = &db;
	my $sth = $db->prepare($query) or die "Couldn't prepare statement: " . $db->errstr;
	my $rows = $sth->execute();

	$sth->execute();
	my $ref;

	while ($ref = $sth->fetchrow_hashref) {
		print "\t$ref->{id}\t$ref->{opt}\n";
	}

	# Wait for input
	my $input = prompt('', "Please select a $keyword");

	# Validate input
	$input =~ s/[^0-9]//g;

	# Return input
	return $input;
}

# Insert a record into any table
sub newrecord {
	# Read in hash of values
	my $data = shift;

	# Read in table name
	my $table = shift;

	# Dump data for debugging
	print "\n\nThis is what I would have inserted into $table:\n";
	print Dumper(\$data);

	# Build query
	my $sql = SQL::Abstract->new;
	my($stmt, @bind) = $sql->insert($table, $data);
	print "And here's the SQL I've generated:\n$stmt\n";

	# Execute query
	# my $sth = $dbh->prepare($stmt);
        # $sth->execute(@bind);

	# Display inserted row
	# $sth->{mysql_insertid}
}

# Update an existing record in any table
sub updaterecord {
	# Read in hash new values
	my $data = shift;

	# Read in table name
	my $table = shift;

	# Read in where condition
	my $where = shift;

	# Quit if where is null

	# Dump data for debugging
        print "\n\nThis is what I would have updated into $table where $where:\n";
        print Dumper(\$data);

        # Build query
        my $sql = SQL::Abstract->new;
        my($stmt, @bind) = $sql->update($table, $data, $where);
        print "And here's the SQL I've generated:\n$stmt\n";
	local $" = ',';
	print "@bind\n";

	# Execute query
	# my $sth = $dbh->prepare($stmt);
        # $sth->execute(@bind);

        # Display inserted row
        # $sth->{mysql_insertid}
}

# Connect to the database
sub db {
	my $connect;

	# Look for ini file
	if (-e '~/.photodb.ini') {
		$connect = ReadINI('~/.photodb.ini');
	}
	elsif (-e 'photodb.ini') {
                $connect = ReadINI('photodb.ini');
        }
	elsif (-e '/etc/photodb.ini') {
		$connect = ReadINI('/etc/photodb.ini');
	}
	else {
		print "Could not find config file";
		exit;
	}

	# host, schema, user, pass
	if (!defined($$connect{'photodb'}{'host'}) || !defined($$connect{'photodb'}{'schema'}) || !defined($$connect{'photodb'}{'user'}) || !defined($$connect{'photodb'}{'pass'})) {
		print "Config file did not contain correct values";
		exit;
	}

	my $dbh = DBI->connect("DBI:mysql:database=$$connect{'photodb'}{'schema'};host=$$connect{'photodb'}{'host'}", $$connect{'photodb'}{'user'}, $$connect{'photodb'}{'pass'})
		or die "Couldn't connect to database: " . DBI->errstr;
	return $dbh;
}

# Prompt for an arbitrary value
sub prompt {
        my $default = shift || "";
        my $prompt = shift;

        print "$prompt [$default]: ";
        my $input = <STDIN>;
        chomp($input);

        my $rv = ($input eq "") ? $default:$input;
        return $rv;
}
